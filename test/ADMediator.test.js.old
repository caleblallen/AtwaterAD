var ADM = require('../bin/ADMediator');
var Mediator = new ADM().getInstance();
let colorTwister = require('./colorTwister');
var should = require('chai').should();
const sinon = require('sinon');



describe('Mediator Object should construct without errors', function () {

    before( () => {
        console.log( '\n' );
        console.log( colorTwister( 'Mediator Tests'.padStart( 35, '▀▄' ).padEnd( 55, '▄▀' ) ) );
        console.log( '\n' );
    } );

    it( 'Mediator should create and delete users without error.', ( done ) => {

        let opts = {
            username: 'SpongeSquarepants',
            password: 'SpSq0000',
            firstName: 'Spongebob',
            lastName: 'Squarepants',
            commonName: 'Spongebob Squarepants',
            title: 'Consultant',
            office: 'Bellevue Support Services',
            primarySite: 'Bellevue',
            description: 'Consultant',
            displayName: 'Spongebob Squarepants Sr.',
            initials: 'SS',
            department: 'Bellevue Support Services',
            company: 'Atwater Elementary School District',
            groups: [ 'WiFi-Allowed', 'Thomas Olaeta Staff' ]
        };

        /*        Mediator.getUser('techservices').then( (usr) => {
                    console.log( usr );
                })*/

        Mediator.createUser( opts ).then(
            ( result ) => {
                result['firstName'].should.equal( opts['firstName'] );
                result['lastName'].should.equal( opts['lastName'] );
                result['title'].should.equal( opts['title'] );
                return result['userName'];
            }
        ).then( ( uid ) => {
            Mediator.deleteUser( uid ).then( ( res ) => {
                res['success'].should.be.equal( true );
                done();
            } )
        } );
    } );

    it( 'Mediator should add a user to groups array', ( done ) => {
        let opts = {
            username: 'SRectanglebreeches',
            password: 'SpSq0000',
            firstName: 'Spongebob',
            lastName: 'Rectanglebreeches',
            commonName: 'Spongebob Rectanglebreeches',
            title: 'Consultant',
            office: 'Bellevue Support Services',
            primarySite: 'Bellevue',
            description: 'Consultant',
            displayName: 'Spongebob Rectanglebreeches Sr.',
            initials: 'SS',
            department: 'Bellevue Support Services',
            company: 'Atwater Elementary School District',
            groups: [ 'Thomas Olaeta Staff' ]
        };

        let uid;
        Mediator.createUser( opts ).then(
            ( result ) => {
                result['firstName'].should.equal( opts['firstName'] );
                result['lastName'].should.equal( opts['lastName'] );
                result['title'].should.equal( opts['title'] );
                uid = result['userName'];
            }
        ).then( () => {
            return new Promise( ( resolve, reject ) => {
                Mediator.addUserToGroup( uid, 'WiFi-Allowed' ).then( ( result ) => {
                    result.should.be.equal( true );
                    resolve( true );
                } ).catch( ( err ) => {
                    console.log( err.message );
                    resolve( false )
                } )
            } )
        } ).then( ( grpWasAdded ) => {
            if ( grpWasAdded ) {
                return new Promise( ( resolve, reject ) => {
                    Mediator.isUserMemberOf( uid, 'WiFi-Allowed' ).then( ( result ) => {
                        result.should.equal( true );
                        resolve( true );

                    } )
                } )
            } else {
                return new Promise( ( resolve, reject ) => {
                    resolve( false );
                } )
            }
        } ).finally( ( success ) => {
            Mediator.deleteUser( uid ).then( ( res ) => {
                res['success'].should.be.equal( true );
                done();
            } )
        } );
    } );
});
